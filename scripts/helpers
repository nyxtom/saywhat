#!/bin/sh
# -*- coding: utf-8 -*-

red="\033[1;31m"
green="\033[1;32m"
yellow="\033[1;33m"
white="\033[1;37m"
nc="\033[0m"

export LANG=C # ensuring english once we expect the word "LISTEN" on grep

unset -f runthor
unset -f stop_supervisor
unset -f start_supervisor
unset -f dtest
unset -f atest
unset -f profileit
unset -f default_tests
unset -f syncdb
unset -f askthor
unset -f silent
unset -f clearpyc
unset -f shelter
unset -f simplekill

HERE=`pwd`
alias clearpyc='find . -name "*.pyc" -exec rm "{}" ";"'
alias rmo="find . -name *.orig -exec rm '{}' ';'"

silent () {
    ($@ 2>&1 > /dev/null) 2>&1 > /dev/null
}

shelter () {
    mkvirtualenv --no-site-packages $@
}

simplekill () {
    silent kill -9 `ps aux | egrep -i $1 | egrep -v "(grep)" | awk '{ print $2 }'`
}

askthor () {
    # Simply prints out the list of available commands used with the project
    echo
    print_cmd clearpyc "Finds and deletes and *.pyc files in the project"
    print_cmd rmo "Finds and removes all .orig files."
    print_cmd syncdb "Uses django syncdb to a specific db, drop, create and sync with migration fake steps"
    print_cmd profileit "Runs the django test runner with the -cProfile python extension"
    print_cmd default_tests "Finds all tests under your apps/ directory"
    print_cmd dtest "Runs the django test runner"
    print_cmd atest "Runs lettuce harvest after creating an acceptance database"
    print_cmd stop_supervisor "Stops the supervisord in your scripts folder"
    print_cmd start_supervisor "Starts the supervisord in your scripts folder"
    print_cmd runthor "Uses the django runserver command after starting up the supervisor service"
    print_cmd checkports "Checks to see if all the ports are available for running the site"
    print_cmd prepare_nginx "Copies over the tmp nginx.cfg and writes the current project to map ^/static/"
    echo
}
print_cmd() {
    printf "$yellow$1$white: $2 $nc"
    echo
}

syncdb () {
    # sync a specific database, doing the drop, create, and sync steps
    db=$1
    if [[ -z $db ]]; then
        db=thor
    fi
    dropdb $db
    createdb $db && ./manage.py syncdb --all --noinput
}

profileit () {
    # run the tests using the standard Django testrunner
    TESTS="$@"
    if [[ -z $TESTS ]]; then
        TESTS=`default_tests`
    fi
    clearpyc
    python -m cProfile -o test.prof manage.py test $TESTS
}

default_tests () {
    # list all the default tests that should be run
    # unclebob requires the format apps/appname/tests
    for name in `find apps -maxdepth 1 -type d -not -name apps`; do
        echo "$name/tests"
    done;
}

dtest () {
    TESTS="$A"
    if [[ -z $TESTS ]]; then
        TESTS=`default_tests`
    fi
    clearpyc
    ./manage.py test $TESTS
}

stop_supervisor () {
    if [[ ! -f manage.py ]]; then
        echo "You must run this command from the root project folder"
        return 1
    fi
    printf "Will now stop supervisor... "
    for conffile in scripts/supervisord.conf; do
        while [ -z "$?" ]; do
            silent supervisorctl -c $conffile shutdown
        done
    done
    simplekill 'supervisor(d|ctl)'
    simplekill nginx
    simplekill redis
    simplekill socketioserver
    echo "OK"
}

start_supervisor () {
    if [[ ! -f manage.py ]]; then
        echo "You must run this command from the root project folder"
        return 1
    fi
    stop_supervisor
    printf "Starting supervisor... "
    mkdir -p scripts/logs
    silent supervisord -c scripts/supervisord.conf
    echo "OK"
}

prepare_nginx (){
    sed "s,[#]varwww[#],$HERE,g" scripts/configs/nginx.cfg.example > scripts/configs/nginx.cfg
}

runthor () {
    clearpyc
    prepare_nginx
    start_supervisor;
    silent ./socketioserver.py & 
    ./manage.py runserver 7000 $@ --settings=settings
    stop_supervisor
    clearpyc
}

atest () {
    # runs acceptance tests using lettuce
    DBNAME=thor_acceptance
    $PSQL_BIN --list | egrep $DBNAME 2>&1 > /dev/null
    has_db=$?

    if [ "$has_db" = "1" ]; then
        echo "it seems you don't have the database \"$DBNAME\" yet"
    fi;

    if [ "$1" != "--fast" ] || [ "$has_db" = "1" ]; then
        printf "preparing the acceptance database... "
        silent syncdb $DBNAME
        echo "ok"
    fi;

    # Run the acceptance tests with lettuce harvest
    start_supervisor
    args=`echo $@ | 's,--fast,,g'`;
    ./manage.py harvest $args
    stop_supervisor
}

check_port () {
    printf "$yellow[PORT $1] -> $white$2 ...$nc"
    killarg=`echo $@ | egrep '[-]{2}kill'`
    has_permission_to_kill=$?

    if [ -z has_permission_to_kill ]; then
        (netstat -na | egrep "[:.]$1.*LISTEN" 2>&1 > /dev/null) 2>&1 || printf "$green OK$nc\n"
        pid=`sudo lsof -i :$1 | awk '{ print $2 }' | grep -vi PID`
        if [ ! -z "$pid" ]; then
            (sudo kill -9 $pid 2>&1 > /dev/null) 2>&1 > /dev/null && printf "$yellow KILLED$nc\n" || printf "$red impossible. $white Maybe it's been already killed somehow\n$nc\n"
        fi;
    else
        (netstat -na | egrep "[:.]$1.*LISTEN" 2>&1 > /dev/null) 2>&1 && printf "$red BUSY\n$nc\n" && exit 1 || printf "$green OK$nc\n"
    fi;
}

checkports() {
    echo
    check_port 9999 "for supervisord control panel"
    check_port 9000 "for socketio (public facing) port"
    check_port 8000 "for frontend's nginx"
    check_port 7000 "for django server"
    check_port 6379 "for redis"
    check_port 7777 "for socketio server"
    echo
}
